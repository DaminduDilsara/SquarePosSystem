// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/clients/square_client/square_order_client.go

// Package mock_square_client is a generated GoMock package.
package mocks

import (
	request_schemas "SquarePosSystem/internal/domain/entities/schemas/request_schemas"
	response_schemas "SquarePosSystem/internal/domain/entities/schemas/response_schemas"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderClient is a mock of OrderClient interface.
type MockOrderClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderClientMockRecorder
}

// MockOrderClientMockRecorder is the mock recorder for MockOrderClient.
type MockOrderClientMockRecorder struct {
	mock *MockOrderClient
}

// NewMockOrderClient creates a new mock instance.
func NewMockOrderClient(ctrl *gomock.Controller) *MockOrderClient {
	mock := &MockOrderClient{ctrl: ctrl}
	mock.recorder = &MockOrderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderClient) EXPECT() *MockOrderClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderClient) CreateOrder(request request_schemas.CreateOrderSquareRequest, authHeader string) (*response_schemas.CreateOrderSquareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", request, authHeader)
	ret0, _ := ret[0].(*response_schemas.CreateOrderSquareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderClientMockRecorder) CreateOrder(request, authHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderClient)(nil).CreateOrder), request, authHeader)
}

// FindOrders mocks base method.
func (m *MockOrderClient) FindOrders(request request_schemas.FindOrdersSquareRequest, authHeader string) (*response_schemas.FindOrdersSquareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrders", request, authHeader)
	ret0, _ := ret[0].(*response_schemas.FindOrdersSquareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrders indicates an expected call of FindOrders.
func (mr *MockOrderClientMockRecorder) FindOrders(request, authHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrders", reflect.TypeOf((*MockOrderClient)(nil).FindOrders), request, authHeader)
}

// SearchOrders mocks base method.
func (m *MockOrderClient) SearchOrders(request request_schemas.SearchOrdersSquareRequest, authHeader string) (*response_schemas.SearchOrdersSquareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrders", request, authHeader)
	ret0, _ := ret[0].(*response_schemas.SearchOrdersSquareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrders indicates an expected call of SearchOrders.
func (mr *MockOrderClientMockRecorder) SearchOrders(request, authHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrders", reflect.TypeOf((*MockOrderClient)(nil).SearchOrders), request, authHeader)
}
