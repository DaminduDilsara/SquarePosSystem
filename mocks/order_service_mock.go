// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/services/order_service/order_service.go

// Package mock_order_service is a generated GoMock package.
package mocks

import (
	request_schemas "SquarePosSystem/internal/domain/entities/schemas/request_schemas"
	response_schemas "SquarePosSystem/internal/domain/entities/schemas/response_schemas"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderService) CreateOrder(request request_schemas.CreateOrderIncomingRequest, authHeader string) (*response_schemas.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", request, authHeader)
	ret0, _ := ret[0].(*response_schemas.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceMockRecorder) CreateOrder(request, authHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderService)(nil).CreateOrder), request, authHeader)
}

// FindOrders mocks base method.
func (m *MockOrderService) FindOrders(request request_schemas.FindOrdersIncomingRequest, authHeader string) (*response_schemas.FindOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrders", request, authHeader)
	ret0, _ := ret[0].(*response_schemas.FindOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrders indicates an expected call of FindOrders.
func (mr *MockOrderServiceMockRecorder) FindOrders(request, authHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrders", reflect.TypeOf((*MockOrderService)(nil).FindOrders), request, authHeader)
}

// SearchOrders mocks base method.
func (m *MockOrderService) SearchOrders(request request_schemas.SearchOrdersIncomingRequest, authHeader string) (*response_schemas.SearchOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrders", request, authHeader)
	ret0, _ := ret[0].(*response_schemas.SearchOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrders indicates an expected call of SearchOrders.
func (mr *MockOrderServiceMockRecorder) SearchOrders(request, authHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrders", reflect.TypeOf((*MockOrderService)(nil).SearchOrders), request, authHeader)
}
